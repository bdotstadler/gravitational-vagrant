# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile to bring up three instances of an OS to support a small
# Kubernetes cluster.
# NOTE:  Do not redefine your VMs while they are running and expect
# Vagrant to be able to destroy them.  Vagrant will lose track of them.

Vagrant.configure("2") do |config|

# I will define first a single box and then further redefine it into three
# identical boxes to support the three node setup.

  # IMPORTANT to note for the config below, the image we have defined also brings
  # in its own Vagrantfile.  It's config is listed here for reference.  
  # Reference: https://github.com/vagrant-libvirt/vagrant-libvirt#libvirt-configuration
  #   Vagrant.configure('2') do |config|
  #      config.vm.synced_folder ".", "/home/vagrant/sync", type: "rsync"
  #      config.vm.provider :libvirt do |libvirt|
  #              libvirt.driver = 'kvm'
  #              libvirt.connect_via_ssh = false
  #              libvirt.username = 'root'
  #              libvirt.storage_pool_name = 'default'
  #         end
  #      end#

  # Perform a view global changes to the livirt providor as a test.
    config.vm.provider :libvirt do |libvirt|
	    libvirt.memory = 1024
    end


  # Define the box to use from the Hashicorp repos.
  #  config.vm.box = "fedora/26-atomic-host"

  # Only set to true if check for updates is not desired.
  #  config.vm.box_check_update = false

  # Port forwading definition, if desired.  Not using at this time.
  #  config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #  config.vm.network "private_network", ip: "192.168.33.10"


  # Use the hosts public network.  Must also define the NIC.
  # NOTE: This is currently failing.  Vagrant/libvirt only want to look
  # for eth0.  eth0 does not exist on this system.
  # NOTE: After some research I came across this;
  # https://github.com/vagrant-libvirt/vagrant-libvirt/issues/349
  # From here we added the 'dev' flag.  This corrected the problem.
  # HOWEVER, now the VM has two interfaces and is pulling a default
  # NATed IP address and a public network IP address.  Also, two
  # default routes!  Great.
  # UPDATE: Vagrant will always create its own internal NATed network.
  # One must manually change the routing on the guest VM after its up.
  #  config.vm.network "public_network", bridge: "eno1", dev: "eno1"
  #  config.vm.provision "shell", run: "always",
  #      inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"

  # Set hostname
  #  config.vm.hostname = "atomic1"

  # Set post up message
  #  config.vm.post_up_message = "atomic1 is up"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"


  # Here we create three boxes, each with individual definitions for their
  # respective configurations.  This will get very repetitive. Skipping this
  # this method for now.

  # Create three boxes.
  # First manaually define all three.

  #  config.vm.define "atomic1" do |atomic1|
  #    atomic1.vm.box = "fedora/26-atomic-host"
  #  end

  #  config.vm.define "atomic2" do |atomic2|
  #    atomic2.vm.box = "fedora/26-atomic-host"
  #  end

  #  config.vm.define "atomic3" do |atomic3|
  #    atomic3.vm.box = "fedora/26-atomic-host"
  #  end


  # Finally generate all three using a Ruby 'each' clause. 'for' is strange
  # in Ruby. Programmatically define everything since these three boxes
  # will be near identical.
  # NOTE: In Ruby it appears the '#' sign before a variable{} is used to 
  # define its type.  Meaning, the '#' will not be part of the end result.

    (1..3).each do |i|
      config.vm.define "atomic#{i}" do |node|
        node.vm.box = "fedora/26-atomic-host"
        node.vm.hostname = "atomic#{i}"
        node.vm.network "public_network", bridge: "eno1", dev: "eno1"
        #Vagrant/Ruby doesn't like how I've declared the host port.
        #node.vm.network "forwarded_port", guest: 22, host: "222#{i}"
	node.vm.post_up_message = "atomic#{i} is up."
	node.vm.provision "shell", run: "always",
          inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"
      end
    end


  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
